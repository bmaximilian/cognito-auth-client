{"version":3,"sources":["components/ContentBox.tsx","components/Steps.tsx","components/FormGroup.tsx","components/Input.tsx","components/SubmitButton.tsx","components/PinModal.tsx","safe/SafeProvider.tsx","components/ErrorBanner.tsx","components/DescriptionBox.tsx","widgets/LoginForm.tsx","components/List.tsx","widgets/SavedEntryList.tsx","auth/AuthenticationContext.ts","auth/MockTokenStorage.ts","auth/CognitoAuthenticationProvider.tsx","widgets/TokenDisplay.tsx","components/BackButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContentBox","props","borderWidth","borderRadius","overflow","padding","mb","Steps","align","Array","steps","fill","map","_","index","Fragment","size","variant","transition","colorScheme","currentStep","undefined","marginX","Title","fontWeight","as","lineHeight","isTruncated","FormGroup","title","spacing","children","Input","focusBorderColor","SubmitButton","PinModal","useState","error","setError","pin","a","onPinEntered","message","isOpen","onClose","pb","description","justifyContent","display","type","mask","onComplete","isInvalid","autoFocus","SafeContext","createContext","undefinedData","userPool","id","region","clientId","secret","username","password","metadata","scope","save","SafeProvider","safe","getAll","JSON","parse","localStorage","getItem","keys","Object","get","key","entries","Error","decrypted","AES","decrypt","toString","enc","Utf8","merge","store","value","encrypted","encrypt","stringify","setItem","Provider","useSafe","useContext","ErrorBanner","status","flex","mr","DescriptionBox","paddingY","paddingX","fontSize","LoginForm","setTitle","userPoolId","setUserPoolId","userPoolRegion","setUserPoolRegion","userPoolClientId","setUserPoolClientId","userPoolClientSecret","setUserPoolClientSecret","setUsername","setPassword","setScope","setSave","isLoading","setLoading","showPinModal","setShowPinModal","buildForm","completeLogin","data","onSubmit","dataWithTitle","equals","initialData","useEffect","in","offsetY","e","preventDefault","handleSubmit","placeholder","isRequired","onChange","target","isChecked","checked","loadingText","List","assign","Item","SavedEntryList","items","length","onAdd","item","onClick","onItemClick","Add","AuthenticationContext","useAuthentication","auth","MockTokenStorage","this","CognitoAuthenticationProvider","tokens","setTokens","login","credentials","config","Auth","userPoolWebClientId","mandatorySignIn","storage","clientMetadata","configure","signIn","currentSession","session","accessToken","jwt","getAccessToken","getJwtToken","decoded","decodePayload","idToken","getIdToken","getTokens","hasTokens","TokenItem","justify","flexWrap","direction","style","marginBottom","wordBreak","whiteSpace","textAlign","token","TokenDisplay","toast","useToast","handleTokenClick","copy","duration","isClosable","BackButton","ChevronLeft","App","step","setStep","setItems","prefilledData","setPrefilledData","requestedDataKey","setRequestedDataKey","dataFromStore","then","storedItems","maxW","mt","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba1472fd.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, BoxProps } from '@chakra-ui/react';\n\nexport const ContentBox: React.FC<BoxProps> = (props) => (\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" padding=\"1.5rem\" mb=\"1rem\" {...props} />\n);\n","import React from 'react';\nimport { Divider, Flex, Tag, TagLabel } from '@chakra-ui/react';\nimport { ContentBox } from './ContentBox';\n\nexport const Steps: React.FC<{ steps: number; currentStep: number }> = (props) => (\n    <ContentBox borderWidth=\"0\">\n        <Flex align=\"center\">\n            {new Array(props.steps).fill(0).map((_, index) => (\n                <React.Fragment key={index}>\n                    <Tag\n                        size=\"lg\"\n                        borderRadius=\"full\"\n                        variant=\"solid\"\n                        transition=\"color background-color 1s\"\n                        colorScheme={index + 1 === props.currentStep ? 'teal' : undefined}\n                    >\n                        <TagLabel>{index + 1}</TagLabel>\n                    </Tag>\n                    {index !== props.steps - 1 && <Divider marginX=\"1rem\" />}\n                </React.Fragment>\n            ))}\n        </Flex>\n    </ContentBox>\n);\n","import React from 'react';\nimport { Box, Stack } from '@chakra-ui/react';\nimport { ContentBox } from './ContentBox';\n\nconst Title: React.FC = (props) => (\n    <Box mb=\"0.5rem\" fontWeight=\"semibold\" as=\"h3\" lineHeight=\"tight\" isTruncated {...props} />\n);\n\nexport const FormGroup: React.FC<{ title: JSX.Element | string }> = (props) => (\n    <ContentBox>\n        <Title>{props.title}</Title>\n        <Stack spacing={3}>{props.children}</Stack>\n    </ContentBox>\n);\n","import React from 'react';\nimport { Input as ChakraInput, InputProps } from '@chakra-ui/react';\n\nexport const Input: React.FC<InputProps> = (props) => <ChakraInput focusBorderColor=\"teal.500\" size=\"lg\" {...props} />;\n","import { Button, ButtonProps } from '@chakra-ui/react';\nimport React from 'react';\n\nexport const SubmitButton: React.FC<ButtonProps> = (props) => (\n    <Button borderWidth=\"1px\" borderRadius=\"lg\" padding=\"1.5rem\" variant=\"solid\" colorScheme=\"teal\" {...props} />\n);\n","import React, { useState } from 'react';\nimport {\n    Box,\n    HStack,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    PinInput,\n    PinInputField,\n} from '@chakra-ui/react';\n\ninterface PinModalProps {\n    isOpen: boolean;\n    onPinEntered: (pin: string) => Promise<void>;\n    onClose?: () => void;\n    title: string;\n    description: string;\n}\n\nexport const PinModal: React.FC<PinModalProps> = (props) => {\n    const [error, setError] = useState<string>();\n\n    async function handlePinEntered(pin: string): Promise<void> {\n        try {\n            await props.onPinEntered(pin);\n        } catch (e) {\n            setError(e.message);\n        }\n    }\n\n    return (\n        <Modal\n            isOpen={props.isOpen}\n            onClose={(): void => {\n                if (!props.onClose) return;\n\n                props.onClose();\n            }}\n        >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{props.title}</ModalHeader>\n                {props.onClose && <ModalCloseButton />}\n                <ModalBody pb=\"1.5rem\">\n                    <Box as=\"p\" mb=\"1rem\">\n                        {props.description}\n                    </Box>\n                    <HStack align=\"center\" justifyContent=\"center\" display=\"flex\">\n                        <PinInput type=\"alphanumeric\" mask onComplete={handlePinEntered} isInvalid={!!error} autoFocus>\n                            <PinInputField />\n                            <PinInputField />\n                            <PinInputField />\n                            <PinInputField />\n                        </PinInput>\n                    </HStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React, { createContext, useContext } from 'react';\nimport { AES, enc } from 'crypto-js';\nimport merge from 'deepmerge';\n\nexport declare type DeepPartial<T> = {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport interface LoginData {\n    userPool: {\n        id: string;\n        region: string;\n        clientId: string;\n        secret?: string;\n    };\n    username: string;\n    password: string;\n    metadata: {\n        scope?: string;\n    };\n    save: boolean;\n}\n\ninterface Safe {\n    getAll(): Promise<{ [key: string]: string }>;\n\n    get(key: string, pin: string): Promise<LoginData>;\n\n    keys(): Promise<string[]>;\n\n    store(key: string, value: LoginData, pin: string): Promise<void>;\n}\n\nconst SafeContext = createContext<Safe | undefined>(undefined);\n\nconst undefinedData: DeepPartial<LoginData> = {\n    userPool: {\n        id: undefined,\n        region: undefined,\n        clientId: undefined,\n        secret: undefined,\n    },\n    username: undefined,\n    password: undefined,\n    metadata: {\n        scope: undefined,\n    },\n    save: true,\n};\n\nexport const SafeProvider: React.FC = (props) => {\n    const safe: Safe = {\n        async getAll(): Promise<{ [key: string]: string }> {\n            return JSON.parse(localStorage.getItem('savedLogins') || '{}');\n        },\n        async keys(): Promise<string[]> {\n            return Object.keys(await this.getAll());\n        },\n        async get(key: string, pin: string): Promise<LoginData> {\n            const entries = await this.getAll();\n\n            if (!entries[key]) {\n                throw new Error(`No data found for key ${key}`);\n            }\n\n            const decrypted = AES.decrypt(entries[key], pin).toString(enc.Utf8);\n            return merge(undefinedData, JSON.parse(decrypted)) as LoginData;\n        },\n        async store(key: string, value: LoginData, pin: string): Promise<void> {\n            const entries = this.getAll();\n            const encrypted = AES.encrypt(JSON.stringify(value), pin).toString();\n\n            localStorage.setItem(\n                'savedLogins',\n                JSON.stringify({\n                    ...entries,\n                    [key]: encrypted,\n                })\n            );\n        },\n    };\n\n    return <SafeContext.Provider value={safe}>{props.children}</SafeContext.Provider>;\n};\n\nexport function useSafe(): Safe {\n    const safe = useContext(SafeContext);\n\n    if (!safe) {\n        throw new Error(`Component that calls useSafe needs to be a deep child of <SafeProvider>`);\n    }\n\n    return safe;\n}\n","import React from 'react';\nimport { Alert, AlertDescription, AlertIcon, AlertTitle, CloseButton, Flex, Stack } from '@chakra-ui/react';\n\nexport const ErrorBanner: React.FC<{ title: JSX.Element | string; message: JSX.Element | string }> = (props) => (\n    <Alert status=\"error\" borderRadius=\"lg\">\n        <Stack spacing={2}>\n            <Flex align=\"center\">\n                <Flex flex={1}>\n                    <AlertIcon />\n                    <AlertTitle mr={2}>{props.title}</AlertTitle>\n                </Flex>\n                <CloseButton />\n            </Flex>\n            <AlertDescription>{props.message}</AlertDescription>\n        </Stack>\n    </Alert>\n);\n","import React from 'react';\nimport { BoxProps, Text } from '@chakra-ui/react';\nimport { ContentBox } from './ContentBox';\n\nexport const DescriptionBox: React.FC<BoxProps> = ({ children, ...props }) => (\n    <ContentBox borderWidth={0} paddingY=\"0.5rem\" paddingX=\"0.5rem\" {...props}>\n        <Text fontSize=\"md\">{children}</Text>\n    </ContentBox>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Checkbox, SlideFade, Stack } from '@chakra-ui/react';\nimport equals from 'deep-equal';\nimport { FormGroup } from '../components/FormGroup';\nimport { Input } from '../components/Input';\nimport { SubmitButton } from '../components/SubmitButton';\nimport { PinModal } from '../components/PinModal';\nimport { useSafe, LoginData } from '../safe';\nimport { ErrorBanner } from '../components/ErrorBanner';\nimport { DescriptionBox } from '../components/DescriptionBox';\n\nexport interface InitialLoginData extends LoginData {\n    title: string;\n}\n\nexport const LoginForm: React.FC<{\n    onSubmit: (data: LoginData) => Promise<void>;\n    onComplete: () => void;\n    initialData?: InitialLoginData;\n}> = (props) => {\n    const [title, setTitle] = useState('');\n    const [userPoolId, setUserPoolId] = useState('');\n    const [userPoolRegion, setUserPoolRegion] = useState('');\n    const [userPoolClientId, setUserPoolClientId] = useState('');\n    const [userPoolClientSecret, setUserPoolClientSecret] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [scope, setScope] = useState('');\n    const [save, setSave] = useState(false);\n    const [error, setError] = useState<string>();\n\n    const [isLoading, setLoading] = useState(false);\n    const [showPinModal, setShowPinModal] = useState(false);\n    const safe = useSafe();\n\n    useEffect(() => {\n        setTitle(props.initialData?.title || '');\n        setUserPoolId(props.initialData?.userPool.id || '');\n        setUserPoolRegion(props.initialData?.userPool.region || 'eu-central-1');\n        setUserPoolClientId(props.initialData?.userPool.clientId || '');\n        setUserPoolClientSecret(props.initialData?.userPool.secret || '');\n        setUsername(props.initialData?.username || '');\n        setPassword(props.initialData?.password || '');\n        setScope(props.initialData?.metadata.scope || '');\n        setSave(!!props.initialData?.save);\n    }, [props.initialData]);\n\n    function buildForm(): LoginData {\n        return {\n            userPool: {\n                id: userPoolId,\n                region: userPoolRegion,\n                clientId: userPoolClientId,\n                secret: userPoolClientSecret || undefined,\n            },\n            username,\n            password,\n            metadata: {\n                scope: scope || undefined,\n            },\n            save,\n        };\n    }\n\n    function completeLogin(): void {\n        props.onComplete();\n        setLoading(false);\n    }\n\n    async function handleSubmit(): Promise<void> {\n        try {\n            setLoading(true);\n            const data = buildForm();\n            await props.onSubmit(data);\n\n            const dataWithTitle = { title, ...data };\n\n            if (save && !equals(dataWithTitle, props.initialData)) {\n                setShowPinModal(true);\n                return;\n            }\n\n            completeLogin();\n        } catch (e) {\n            setError(e.message);\n            setLoading(false);\n        }\n    }\n\n    async function handlePinEntered(pin: string): Promise<void> {\n        await safe.store(title, buildForm(), pin);\n        setShowPinModal(false);\n        completeLogin();\n    }\n\n    return (\n        <SlideFade in offsetY=\"2rem\">\n            <DescriptionBox>\n                Fill out this form to test the login with a specific user pool client.\n                <br />\n                The <strong>title</strong> entered in the application section will be used to store the data set if{' '}\n                <strong>Save for later</strong> is activated.\n            </DescriptionBox>\n            <form\n                onSubmit={(e): void => {\n                    e.preventDefault();\n                    handleSubmit();\n                }}\n            >\n                <FormGroup title=\"Application\">\n                    <Input\n                        placeholder=\"Title\"\n                        isRequired\n                        value={title}\n                        onChange={(e): void => setTitle(e.target.value)}\n                    />\n                </FormGroup>\n                <FormGroup title=\"User Pool Client\">\n                    <Input\n                        placeholder=\"ID\"\n                        isRequired\n                        value={userPoolId}\n                        onChange={(e): void => setUserPoolId(e.target.value)}\n                    />\n                    <Input\n                        placeholder=\"Region\"\n                        isRequired\n                        value={userPoolRegion}\n                        onChange={(e): void => setUserPoolRegion(e.target.value)}\n                    />\n                    <Input\n                        placeholder=\"Client ID\"\n                        isRequired\n                        value={userPoolClientId}\n                        onChange={(e): void => setUserPoolClientId(e.target.value)}\n                    />\n                    <Input\n                        placeholder=\"Secret\"\n                        value={userPoolClientSecret}\n                        onChange={(e): void => setUserPoolClientSecret(e.target.value)}\n                    />\n                </FormGroup>\n                <FormGroup title=\"Login\">\n                    <Input\n                        placeholder=\"Username\"\n                        value={username}\n                        isRequired\n                        onChange={(e): void => setUsername(e.target.value)}\n                    />\n                    <Input\n                        placeholder=\"Password\"\n                        isRequired\n                        type=\"password\"\n                        value={password}\n                        onChange={(e): void => setPassword(e.target.value)}\n                    />\n                    <Input placeholder=\"Scope\" value={scope} onChange={(e): void => setScope(e.target.value)} />\n                </FormGroup>\n                <Stack spacing={3}>\n                    <Checkbox colorScheme=\"teal\" isChecked={save} onChange={(e): void => setSave(e.target.checked)}>\n                        Save for later\n                    </Checkbox>\n                    {!!error && <ErrorBanner title=\"Error during login\" message={error} />}\n                    <SubmitButton isLoading={isLoading} type=\"submit\" loadingText=\"Signing in\">\n                        Login\n                    </SubmitButton>\n                </Stack>\n            </form>\n            <PinModal\n                isOpen={showPinModal}\n                onPinEntered={handlePinEntered}\n                title={`Enter security pin for ${title}`}\n                // eslint-disable-next-line max-len\n                description=\"The pin is needed to encrypt and store your saved data securely. To access the remembered data, the pin needs to be re-entered again.\"\n            />\n        </SlideFade>\n    );\n};\n","import React from 'react';\nimport { Button, ButtonProps, Stack, StackProps } from '@chakra-ui/react';\n\nconst ListItem: React.FC<ButtonProps> = (props) => (\n    <Button borderWidth=\"1px\" borderRadius=\"lg\" padding=\"1.5rem\" variant=\"outline\" {...props} />\n);\n\nconst ListContainer: React.FC<StackProps> = (props) => <Stack spacing={3} {...props} />;\n\nexport const List = Object.assign(ListContainer, { Item: ListItem });\n","import React, { useEffect } from 'react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { SlideFade } from '@chakra-ui/react';\nimport { SubmitButton } from '../components/SubmitButton';\nimport { List } from '../components/List';\nimport { DescriptionBox } from '../components/DescriptionBox';\n\nexport interface SavedEntry {\n    title: string;\n}\n\ninterface SavedEntryListProps {\n    items: SavedEntry[];\n    onItemClick: (item: SavedEntry) => void;\n    onAdd: () => void;\n}\n\nexport const SavedEntryList: React.FC<SavedEntryListProps> = (props) => {\n    useEffect(() => {\n        if (!props.items.length && typeof props.onAdd === 'function') {\n            props.onAdd();\n        }\n    }, [props.items.length, props.onAdd]);\n\n    return (\n        <SlideFade in offsetY=\"2rem\">\n            <DescriptionBox>\n                Click on <strong>Continue without saved data</strong> to create a new login credential data set.\n                <br />\n                It is possible to store these datasets encrypted and protected with a pin directly in your client.\n                Stored datasets appear in this list. The stored data can be loaded by simply clicking on an entry and\n                entering the pin which has been set when storing the data.\n            </DescriptionBox>\n            <List>\n                {props.items.map((item) => (\n                    <List.Item key={item.title} onClick={(): void => props.onItemClick(item)}>\n                        {item.title}\n                    </List.Item>\n                ))}\n                <SubmitButton onClick={props.onAdd}>\n                    <AddIcon />\n                    &ensp;Continue without saved data\n                </SubmitButton>\n            </List>\n        </SlideFade>\n    );\n};\n","import { createContext, useContext } from 'react';\nimport { Authenticator } from './Authenticator';\n\nexport const AuthenticationContext = createContext<Authenticator | undefined>(undefined);\n\nexport function useAuthentication(): Authenticator {\n    const auth = useContext(AuthenticationContext);\n\n    if (!auth) {\n        throw new Error(\n            `The component that calls useAuthentication() needs to be a deep child of and authentication context`\n        );\n    }\n\n    return auth;\n}\n","import { ICognitoStorage } from 'amazon-cognito-identity-js';\n\nexport class MockTokenStorage implements ICognitoStorage {\n    private map: Record<string, string> = {};\n\n    public clear(): void {\n        this.map = {};\n    }\n\n    public getItem(key: string): string | null {\n        return this.map[key] || null;\n    }\n\n    public removeItem(key: string): void {\n        delete this.map[key];\n    }\n\n    public setItem(key: string, value: string): void {\n        this.map[key] = value;\n    }\n}\n","import React, { useState } from 'react';\nimport { Auth } from '@aws-amplify/auth';\nimport { AuthOptions } from '@aws-amplify/auth/lib/types';\nimport { LoginData } from '../safe';\nimport { AuthenticationContext } from './AuthenticationContext';\nimport { Authenticator, Tokens } from './Authenticator';\nimport { MockTokenStorage } from './MockTokenStorage';\n\ninterface CognitoConfig {\n    Auth: AuthOptions;\n}\n\nexport const CognitoAuthenticationProvider: React.FC = (props) => {\n    const [tokens, setTokens] = useState<Tokens>();\n\n    const auth: Authenticator = {\n        async login(credentials: LoginData): Promise<void> {\n            const config: CognitoConfig = {\n                Auth: {\n                    region: credentials.userPool.region,\n                    userPoolId: credentials.userPool.id,\n                    userPoolWebClientId: credentials.userPool.clientId,\n                    mandatorySignIn: true,\n                    storage: new MockTokenStorage(),\n                    clientMetadata: credentials.metadata,\n                },\n            };\n\n            Auth.configure(config);\n            await Auth.signIn(credentials.username, credentials.password, { scope: credentials.metadata.scope || '' });\n\n            const session = await Auth.currentSession();\n            setTokens({\n                accessToken: {\n                    jwt: session.getAccessToken().getJwtToken(),\n                    decoded: session.getAccessToken().decodePayload(),\n                },\n                idToken: {\n                    jwt: session.getIdToken().getJwtToken(),\n                    decoded: session.getIdToken().decodePayload(),\n                },\n            });\n        },\n        getTokens(): Tokens {\n            if (!tokens) {\n                throw new Error('You need to authenticate before calling getTokens()');\n            }\n\n            return tokens;\n        },\n        hasTokens(): boolean {\n            return !!tokens;\n        },\n    };\n\n    return <AuthenticationContext.Provider value={auth}>{props.children}</AuthenticationContext.Provider>;\n};\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\nimport { Flex, SlideFade, useToast } from '@chakra-ui/react';\nimport { List } from '../components/List';\nimport { Token, useAuthentication } from '../auth';\nimport { DescriptionBox } from '../components/DescriptionBox';\n\nconst TokenItem: React.FC<{ title: string; token: string; onClick?: () => void }> = (props) => (\n    <List.Item flex={1} onClick={props.onClick}>\n        <Flex justify=\"space-between\" flex={1} flexWrap=\"wrap\" align=\"start\" direction=\"column\">\n            <span style={{ marginBottom: '0.5rem' }}>{props.title}:</span>\n            <span style={{ wordBreak: 'break-all', whiteSpace: 'pre-wrap', textAlign: 'left', fontWeight: 'normal' }}>\n                {props.token}\n            </span>\n        </Flex>\n    </List.Item>\n);\n\nexport const TokenDisplay: React.FC = () => {\n    const auth = useAuthentication();\n    const toast = useToast();\n\n    if (!auth.hasTokens()) {\n        return null;\n    }\n\n    const tokens = auth.getTokens();\n\n    function handleTokenClick(token: Token): void {\n        copy(token.jwt);\n        toast({\n            title: 'Copied to clipboard.',\n            description: 'The token is copied to your clipboard.',\n            status: 'success',\n            duration: 9000,\n            isClosable: true,\n        });\n    }\n\n    return (\n        <SlideFade in offsetY=\"2rem\">\n            <DescriptionBox>\n                The tokens from the successful login are displayed here.\n                <br />\n                A token can be copied to clipboard by clicking on it.\n                <br />\n                <br />\n                There are 2 types of tokens: <br />\n                The <strong>idToken</strong> contains the information to validate the token (like expiry date, issuer,\n                etc.). But this token also contains custom claims, which might be permissions, scopes and others that\n                are needed to provide deeper user information for the underlying services the user authenticates\n                against.\n                <br />\n                The <strong>accessToken</strong> contains only the relevant information to validate the token. Custom\n                claims are not included here.\n            </DescriptionBox>\n            <List>\n                <TokenItem\n                    title=\"ID Token\"\n                    token={tokens.idToken.jwt}\n                    onClick={(): void => handleTokenClick(tokens.idToken)}\n                />\n                <TokenItem\n                    title=\"Access Token\"\n                    token={tokens.accessToken.jwt}\n                    onClick={(): void => handleTokenClick(tokens.accessToken)}\n                />\n            </List>\n        </SlideFade>\n    );\n};\n","import React from 'react';\nimport { ChevronLeftIcon } from '@chakra-ui/icons';\nimport { Button, ButtonProps } from '@chakra-ui/react';\n\nexport const BackButton: React.FC<ButtonProps> = (props) => (\n    <Button variant=\"ghost\" mb=\"0.5rem\" {...props}>\n        <ChevronLeftIcon /> Back\n    </Button>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Container, Heading } from '@chakra-ui/react';\nimport { Steps } from './components/Steps';\nimport { InitialLoginData, LoginForm } from './widgets/LoginForm';\nimport { SavedEntry, SavedEntryList } from './widgets/SavedEntryList';\nimport { TokenDisplay } from './widgets/TokenDisplay';\nimport { BackButton } from './components/BackButton';\nimport { useSafe, LoginData } from './safe';\nimport { PinModal } from './components/PinModal';\nimport { useAuthentication } from './auth';\n\nconst App: React.FC = () => {\n    const safe = useSafe();\n    const auth = useAuthentication();\n    const [step, setStep] = useState(1);\n    const [items, setItems] = useState<SavedEntry[]>();\n    const [prefilledData, setPrefilledData] = useState<InitialLoginData>();\n    const [requestedDataKey, setRequestedDataKey] = useState<string>();\n\n    useEffect(() => {\n        safe.keys().then((storedItems) => {\n            setItems(storedItems.map((title) => ({ title })));\n            if (!storedItems.length) {\n                setStep(2);\n            }\n        });\n    }, []);\n\n    async function handlePinEntered(pin: string): Promise<void> {\n        if (!requestedDataKey) return;\n\n        const dataFromStore = await safe.get(requestedDataKey, pin);\n\n        setPrefilledData({\n            ...dataFromStore,\n            title: requestedDataKey,\n        });\n        setStep(2);\n        setRequestedDataKey(undefined);\n    }\n\n    async function handleLogin(data: LoginData): Promise<void> {\n        await auth.login(data);\n    }\n\n    function handleLoginComplete(): void {\n        setPrefilledData(undefined);\n        setStep(3);\n    }\n\n    function handleGoBack(): void {\n        setStep((current) => current - 1);\n    }\n\n    if (!items) {\n        return null;\n    }\n\n    const steps = [\n        <SavedEntryList\n            key={0}\n            items={items}\n            onAdd={(): void => setStep(2)}\n            onItemClick={({ title }): void => setRequestedDataKey(title)}\n        />,\n        <LoginForm key={1} onSubmit={handleLogin} onComplete={handleLoginComplete} initialData={prefilledData} />,\n        <TokenDisplay key={2} />,\n    ];\n\n    return (\n        <Container maxW=\"container.md\" mt=\"2rem\" transition=\"width .5s\">\n            <Heading as=\"h1\" mb=\"1rem\">\n                Cognito Auth Client\n            </Heading>\n            <Steps steps={steps.length} currentStep={step} />\n            {step !== 1 && (step !== 2 || items.length > 0) && <BackButton onClick={handleGoBack} />}\n            {steps[step - 1]}\n            <PinModal\n                onClose={(): void => setRequestedDataKey(undefined)}\n                isOpen={!!requestedDataKey}\n                onPinEntered={handlePinEntered}\n                title={`Enter security pin for ${requestedDataKey}`}\n                description=\"The pin is needed to decrypt your saved data and prefill the form.\"\n            />\n        </Container>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SafeProvider } from './safe';\nimport { CognitoAuthenticationProvider } from './auth';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider>\n            <SafeProvider>\n                <CognitoAuthenticationProvider>\n                    <App />\n                </CognitoAuthenticationProvider>\n            </SafeProvider>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}